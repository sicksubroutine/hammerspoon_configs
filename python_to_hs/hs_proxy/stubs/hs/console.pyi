from typing import Optional, Dict, List, Union, Any
from . import window, drawing, styledtext, toolbar

class Console:
    """Hammerspoon console manipulation functions"""

    defaultToolbar: Optional[toolbar.Toolbar]

    @staticmethod
    def alpha(alpha: Optional[float] = None) -> float: ...
    @staticmethod
    def asHSDrawing() -> drawing.Drawing: ...
    @staticmethod
    def asHSWindow() -> window.Window: ...
    @staticmethod
    def behavior(behavior: Optional[int] = None) -> int: ...
    @staticmethod
    def behaviorAsLabels(behaviorTable: Optional[List[Union[str, int]]] = None) -> List[str]: ...
    @staticmethod
    def clearConsole() -> None: ...
    @staticmethod
    def consoleCommandColor(color: Optional[Dict[str, Any]] = None) -> Dict[str, Any]: ...
    @staticmethod
    def consoleFont(font: Optional[Union[str, Dict[str, Any]]] = None) -> Dict[str, Any]: ...
    @staticmethod
    def consolePrintColor(color: Optional[Dict[str, Any]] = None) -> Dict[str, Any]: ...
    @staticmethod
    def consoleResultColor(color: Optional[Dict[str, Any]] = None) -> Dict[str, Any]: ...
    @staticmethod
    def darkMode(state: Optional[bool] = None) -> bool: ...
    @staticmethod
    def getConsole(styled: bool = False) -> Union[str, styledtext.StyledText]: ...
    @staticmethod
    def getHistory() -> List[str]: ...
    @staticmethod
    def hswindow() -> window.Window: ...
    @staticmethod
    def inputBackgroundColor(color: Optional[Dict[str, Any]] = None) -> Dict[str, Any]: ...
    @staticmethod
    def level(theLevel: Optional[int] = None) -> int: ...
    @staticmethod
    def maxOutputHistory(length: Optional[int] = None) -> int: ...
    @staticmethod
    def outputBackgroundColor(color: Optional[Dict[str, Any]] = None) -> Dict[str, Any]: ...
    @staticmethod
    def printStyledtext(*args: Any) -> None: ...
    @staticmethod
    def setConsole(styledText: Optional[Union[str, styledtext.StyledText]] = None) -> None: ...
    @staticmethod
    def setHistory(array: List[str]) -> None: ...
    @staticmethod
    def smartInsertDeleteEnabled(flag: Optional[bool] = None) -> bool: ...
    @staticmethod
    def titleVisibility(state: Optional[str] = None) -> str: ...
    @staticmethod
    def toolbar(toolbar: Optional[toolbar.Toolbar] = None) -> Optional[toolbar.Toolbar]: ...
    @staticmethod
    def windowBackgroundColor(color: Optional[Dict[str, Any]] = None) -> Dict[str, Any]: ...
