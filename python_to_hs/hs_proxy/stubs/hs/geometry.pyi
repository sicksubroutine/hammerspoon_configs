from typing import Union, TypeVar, Any

T = TypeVar("T")

class Point:
    x: float
    y: float

class Size:
    w: float
    h: float

class Rect:
    x: float
    y: float
    w: float
    h: float

GeometryType = Union[Point, Size, Rect]

class Geometry:
    # Properties
    area: float
    aspect: float
    bottomright: Point
    center: Point
    h: float
    length: float
    string: str
    table: dict
    topleft: Point
    w: float
    wh: Size
    x: float
    x1: float
    x2: float
    x2y2: Point
    xy: Point
    y: float
    y1: float
    y2: float

    def angle(self) -> float: ...
    def angleTo(self, point: GeometryType) -> float: ...
    @staticmethod
    def copy(geom: GeometryType) -> "Geometry": ...
    def distance(self, point: GeometryType) -> float: ...
    def equals(self, other: GeometryType) -> bool: ...
    def fit(self, bounds: Rect) -> "Geometry": ...
    def floor(self) -> "Geometry": ...
    def fromUnitRect(self, frame: Rect) -> "Geometry": ...
    def inside(self, rect: Rect) -> bool: ...
    def intersect(self, rect: Rect) -> "Geometry": ...
    def move(self, point: Point) -> "Geometry": ...
    @staticmethod
    def new(*args: Any) -> "Geometry": ...
    def normalize(self) -> "Geometry": ...
    @staticmethod
    def point(x: float, y: float) -> Point: ...
    @staticmethod
    def rect(x: float, y: float, w: float, h: float) -> Rect: ...
    def rotateCCW(self, aroundpoint: Point, ntimes: int = 1) -> Point: ...
    def scale(self, size: Union[Size, float]) -> "Geometry": ...
    @staticmethod
    def size(w: float, h: float) -> Size: ...
    def toUnitRect(self, frame: Rect) -> "Geometry": ...
    def type(self) -> str: ...
    def union(self, rect: Rect) -> "Geometry": ...
    def vector(self, point: GeometryType) -> Point: ...
