from typing import Union, Dict, List, Any, Optional, Iterator, ClassVar, Tuple

class StyledText:
    # Class variables
    defaultFonts: ClassVar[Dict[str, Dict[str, Any]]]
    fontTraits: ClassVar[Dict[str, int]]
    lineAppliesTo: ClassVar[Dict[str, int]]
    linePatterns: ClassVar[Dict[str, int]]
    lineStyles: ClassVar[Dict[str, int]]

    @staticmethod
    def ansi(text: str, attributes: Optional[Dict[str, Any]] = None) -> "StyledText": ...
    def asTable(self, starts: Optional[int] = None, ends: Optional[int] = None) -> List[Union[str, Dict[str, Any]]]: ...
    def byte(self, starts: Optional[int] = None, ends: Optional[int] = None) -> List[int]: ...
    def convert(self, type_: str = "html") -> str: ...
    @staticmethod
    def convertFont(fontTable: Union[str, Dict[str, Any]], trait: Union[int, bool]) -> Dict[str, Any]: ...
    def copy(self) -> "StyledText": ...
    @staticmethod
    def fontFamilies() -> List[str]: ...
    @staticmethod
    def fontInfo(font: Union[str, Dict[str, Any]]) -> Dict[str, Any]: ...
    @staticmethod
    def fontNames() -> List[str]: ...
    @staticmethod
    def fontNamesWithTraits(fontTraitMask: Union[int, List[int]]) -> List[str]: ...
    @staticmethod
    def fontPath(font: str) -> Optional[str]: ...
    @staticmethod
    def fontsForFamily(familyName: str) -> Optional[List[List[Any]]]: ...
    def getString(self, starts: Optional[int] = None, ends: Optional[int] = None) -> str: ...
    @staticmethod
    def getStyledTextFromData(data: str, type_: str = "html") -> "StyledText": ...
    @staticmethod
    def getStyledTextFromFile(file: str, type_: str = "html") -> "StyledText": ...
    def gmatch(self, pattern: str) -> Iterator[str]: ...
    def isIdentical(self, styledText: "StyledText") -> bool: ...
    def len(self) -> int: ...
    @staticmethod
    def loadFont(path: str) -> Tuple[bool, Optional[str]]: ...
    def lower(self) -> "StyledText": ...
    def match(self, pattern: str, init: Optional[int] = None) -> Optional[Union[str, Tuple[str, ...]]]: ...
    @staticmethod
    def new(
        text: Union[str, Dict[str, Any], "StyledText"], attributes: Optional[Dict[str, Any]] = None
    ) -> "StyledText": ...
    def removeStyle(
        self, attributes: List[str], starts: Optional[int] = None, ends: Optional[int] = None
    ) -> "StyledText": ...
    def rep(self, n: int, separator: Optional[Union[str, "StyledText"]] = None) -> "StyledText": ...
    def setString(
        self,
        string: Union[str, Dict[str, Any], "StyledText"],
        starts: Optional[int] = None,
        ends: Optional[int] = None,
        clear: Optional[bool] = None,
    ) -> Optional["StyledText"]: ...
    def setStyle(
        self, attributes: Dict[str, Any], starts: Optional[int] = None, ends: Optional[int] = None, clear: bool = False
    ) -> "StyledText": ...
    def sub(self, starts: int, ends: Optional[int] = None) -> "StyledText": ...
    def upper(self) -> "StyledText": ...
    @staticmethod
    def validFont(font: str) -> bool: ...
