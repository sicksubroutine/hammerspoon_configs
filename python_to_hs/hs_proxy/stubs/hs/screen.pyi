from typing import Optional, List, Dict, Union, Any, ClassVar
from . import geometry

class Screen:
    strictScreenInDirection: ClassVar[bool]

    def absoluteToLocal(self, geom: Union[geometry.Point, geometry.Rect]) -> geometry.Rect: ...
    @staticmethod
    def accessibilitySettings() -> Dict[str, bool]: ...
    @staticmethod
    def allScreens() -> List["Screen"]: ...
    def availableModes(self) -> Dict[str, Dict[str, Union[int, float]]]: ...
    def currentMode(self) -> Dict[str, Union[int, float, str]]: ...
    def desktopImageURL(self, imageURL: Optional[str] = None) -> Union["Screen", str]: ...
    @staticmethod
    def find(hint: Union[int, str, geometry.Point, geometry.Size, geometry.Rect]) -> Optional["Screen"]: ...
    def frame(self) -> geometry.Rect: ...
    def fromUnitRect(self, unitrect: geometry.Rect) -> geometry.Rect: ...
    def fullFrame(self) -> geometry.Rect: ...
    def getBrightness(self) -> Optional[float]: ...
    @staticmethod
    def getForceToGray() -> bool: ...
    def getGamma(self) -> Optional[Dict[str, Dict[str, float]]]: ...
    def getInfo(self) -> Optional[Dict[str, Any]]: ...
    @staticmethod
    def getInvertedPolarity() -> bool: ...
    def getUUID(self) -> Optional[str]: ...
    def id(self) -> int: ...
    def localToAbsolute(self, geom: Union[geometry.Point, geometry.Rect]) -> geometry.Rect: ...
    @staticmethod
    def mainScreen() -> "Screen": ...
    def mirrorOf(self, aScreen: "Screen", permanent: bool = False) -> bool: ...
    def mirrorStop(self, permanent: bool = False) -> bool: ...
    def name(self) -> Optional[str]: ...
    def next(self) -> "Screen": ...
    def position(self) -> tuple[int, int]: ...
    def previous(self) -> "Screen": ...
    @staticmethod
    def primaryScreen() -> "Screen": ...
    @staticmethod
    def restoreGamma() -> None: ...
    def rotate(self, degrees: Optional[int] = None) -> Union[bool, int]: ...
    @staticmethod
    def screenPositions() -> Dict["Screen", Dict[str, int]]: ...
    def setBrightness(self, brightness: float) -> "Screen": ...
    @staticmethod
    def setForceToGray(ForceToGray: bool) -> None: ...
    def setGamma(self, whitepoint: Dict[str, float], blackpoint: Dict[str, float]) -> bool: ...
    @staticmethod
    def setInvertedPolarity(InvertedPolarity: bool) -> None: ...
    def setMode(self, width: int, height: int, scale: float, frequency: float, depth: int) -> bool: ...
    def setOrigin(self, x: int, y: int) -> bool: ...
    def setPrimary(self) -> bool: ...
    def shotAsJPG(self, filePath: str, screenRect: Optional[geometry.Rect] = None) -> None: ...
    def shotAsPNG(self, filePath: str, screenRect: Optional[geometry.Rect] = None) -> None: ...
    def snapshot(self, rect: Optional[geometry.Rect] = None) -> Optional[Any]: ...  # Returns hs.image
    def toEast(
        self, from_: Optional[Union[geometry.Rect, geometry.Point]] = None, strict: bool = False
    ) -> Optional["Screen"]: ...
    def toNorth(
        self, from_: Optional[Union[geometry.Rect, geometry.Point]] = None, strict: bool = False
    ) -> Optional["Screen"]: ...
    def toSouth(
        self, from_: Optional[Union[geometry.Rect, geometry.Point]] = None, strict: bool = False
    ) -> Optional["Screen"]: ...
    def toUnitRect(self, rect: geometry.Rect) -> geometry.Rect: ...
    def toWest(
        self, from_: Optional[Union[geometry.Rect, geometry.Point]] = None, strict: bool = False
    ) -> Optional["Screen"]: ...
